#!/bin/bash
#$ -pe smp 12
#$ -N base
#$ -M jhaase1@nd.edu
#$ -m ae
#$ -r y
#$ -q *@@dgo

cCycles=0
transientCycles=50

limit="5E-6"
limit=`echo ${limit} | sed -e 's/[eE]+*/\*10\^/'`

norm2=1000

cmd="mpirun -np 12 ~/zapdos/zapdos-opt -i"
SmallOutput="Outputs/out/execute_on='final'"
options=""
####options="gap=2E-6 Materials/gas_block/user_work_function=4.00"
post=""

if [[ ! -z "$SGE_STDOUT_PATH" ]]
then
	module purge
	module load opt_local ompi/2.0.1-gcc-6.2.0 paraview/5.3.0
	
	fsync -d 120 `pwd`/CurrentCycle.log &
	post="--no-color > CurrentCycle.log"

	killall -u jhaase1 -w -s SIGKILL zapdos-opt
fi

while [ `echo $norm2'<'$limit | bc -l` -eq 0 ]; do
	#Run initial cycle
	dCycles=${transientCycles}
	
	if [ ${cCycles} -eq 0 ]
	then
		eval "${cmd} Initial.i completedCycles=${cCycles} desiredCycles=${dCycles} ${options} ${post}"
		cCycles=$((cCycles+dCycles))

		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls Initial* -d | grep -v '\.i'` ; do
			mv $f $(echo "$f" | sed 's/Initial/PreviousCycle/g')
		done
	else
		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls SteadyState* -d | grep -v '\.i'` ; do
			mv $f $(echo "$f" | sed 's/SteadyState/PreviousCycle/g')
		done
		
		eval "${cmd} SteadyState.i completedCycles=${cCycles} desiredCycles=${dCycles} ${SmallOutput} ${options} ${post}"
		cCycles=$((cCycles+dCycles))

		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls SteadyState* -d | grep -v '\.i'` ; do
			mv $f $(echo "$f" | sed 's/SteadyState/PreviousCycle/g')
		done
	fi

	#Run first steady state cycle
		dCycles=1
		eval "${cmd} SteadyState.i completedCycles=${cCycles} desiredCycles=${dCycles} ${options} ${post}"
		cCycles=$((cCycles+dCycles))

		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls SteadyState* -d | grep -v '\.i'` ; do 
			mv $f $(echo "$f" | sed 's/SteadyState/PreviousCycle/g') ;
		done
		
	#Run second steady state cycle
		dCycles=1
		eval "${cmd} SteadyState.i completedCycles=${cCycles} desiredCycles=${dCycles} ${options} ${post}"
		cCycles=$((cCycles+dCycles))

	# Check error
		pvpython GetR2Error.py
		dos2unix sum.csv
		norm2=`cat sum.csv | sed -e 's/[eE]+*/\*10\^/'`
		rm sum.csv
done

pvpython ParaviewCycleData.py
rm -rf PreviousCycle